"""
1. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    1. –§–ò–û
    2. –ù–∏–∫ –≤ telegram
    3. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ –ú–ò–°–ò–° (–≤ –¥–æ–º–µ–Ω–µ @edu.misis.ru)
    4. –£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞
    5. –°—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    6. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî frontend, backend –∏ —Ç –¥
    7. –ù–∞–≤—ã–∫–∏ ‚Äî —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    8. –°—Å—ã–ª–∫–∏ ‚Äî –≥–∏—Ç, —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ—á–∏–µ
    9. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞–º ‚Äî –≥–æ—Ç–æ–≤/–Ω–µ –≥–æ—Ç–æ–≤
    10. –≤ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç

–ü–æ–¥—É–º–∞—Ç—å –Ω–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ –≥—É–≥–ª –¥–æ–∫—Å
–ò –∫–∞–∫ —ç—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥?)
"""


import datetime as dt
import typing as tp
from aiogram import types


from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.i18n import gettext as _

from ..keyboards.menu import MainMenuCallback

# TODO move into enums
PROFILE_ACTIONS = tp.Literal["user_form", "editing", "admin_menu", "save"]


ADMIN_PROFILE_ACTIONS = tp.Literal["export", "change_status", "add_admin"]
PROFILE_EDITABLE_FIELD = tp.Literal[
    "fio",
    "email",
    "educational_group",
    "portfolio_link",
    "majors",
    "skills",
    "external_links",
    "mentor_status",
    "company",
]


# AVALIABLE_PROFESSIONS = [
#     "Fullstack",
#     "Backend",
#     "Frontend",
#     "GameDev",
#     "Mobile",
#     "DevOps",
#     "ML Engineer",
#     "UI/UX Designer",
#     "Project Manager",
# ]

AVALIABLE_PROFESSIONS = {
    "Flstk": "Fullstack",
    "Bd": "Backend",
    "Fd": "Frontend",
    "Gdv": "GameDev",
    "Mob": "Mobile",
    "DO": "DevOps",
    "ML": "ML Engineer",
    "UI": "UI/UX Designer",
    "CD": "Communication Design",
    "PM":"Project Manager",
}


class ProfileMenuCallback(CallbackData, prefix="profile"):
    """
    –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    1. –§–ò–û
    2. –ù–∏–∫ –≤ telegram +
    3. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ –ú–ò–°–ò–° (–≤ –¥–æ–º–µ–Ω–µ @edu.misis.ru)
    4. –£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞
    5. –°—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ?
    6. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî frontend, backend –∏ —Ç –¥
    7. –ù–∞–≤—ã–∫–∏ ‚Äî —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    8. –°—Å—ã–ª–∫–∏ ‚Äî –≥–∏—Ç, —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ—á–∏–µ
    9. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞–º ‚Äî –≥–æ—Ç–æ–≤/–Ω–µ –≥–æ—Ç–æ–≤
    10. –≤ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # fio: str | None = None
    # email: str | None = None
    # educational_group: str | None = None
    # portfolio_link: str | None = None
    # majors: list[str] | None = None
    # skills: list[str] | None = None
    # external_links: list[str] | None = None
    # mentor_status: bool | None = None
    # company: str | None = None
    """

    action: PROFILE_ACTIONS | None = None
    field: PROFILE_EDITABLE_FIELD | None = None


class MajorCallback(CallbackData, prefix="pf_mj"):
    value: str | None = None
    confirms: str | None = None

class MentorStatusCallback(CallbackData, prefix="mentor_status"):
    ready: bool | None = None


class ProfileAdminMenuCallback(CallbackData, prefix="profile_admin"):
    action: ADMIN_PROFILE_ACTIONS

class AddAdminCallback(CallbackData, prefix="add_admin"):
    value: str | None = None
    confirms: str | None = None

def profile_menu_keyboard(is_admin: bool = False) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text=_("ü§∑‚Äç‚ôÇÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
            callback_data=ProfileMenuCallback(action="user_form").pack(),
        ),
    )

    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=MainMenuCallback(next_menu_prefix="menu").pack(),
        ),
    )
    if is_admin:
        builder.row(
            types.InlineKeyboardButton(
                text=_("ü¶∫ –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
                callback_data=ProfileMenuCallback(action="admin_menu").pack(),
            )
        )

    return builder.as_markup()


def field_selector_menu() -> types.InlineKeyboardMarkup:
    # FIXME: flexible fields for editing
    builder = InlineKeyboardBuilder()
    callback_data = ProfileMenuCallback(action="editing").pack()
    builder.row(
        types.InlineKeyboardButton(
            text=_("–§–ò–û"),
            callback_data=ProfileMenuCallback(action="editing", field="fio").pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–ü–æ—á—Ç–∞ @edu.misis.ru"),
            callback_data=ProfileMenuCallback(action="editing", field="email").pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞"),
            callback_data=ProfileMenuCallback(
                action="editing", field="educational_group"
            ).pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"),
            callback_data=ProfileMenuCallback(
                action="editing", field="portfolio_link"
            ).pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"),
            callback_data=ProfileMenuCallback(action="editing", field="majors").pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–ù–∞–≤—ã–∫–∏/–°—Ç—ç–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"),
            callback_data=ProfileMenuCallback(action="editing", field="skills").pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏"),
            callback_data=ProfileMenuCallback(
                action="editing", field="external_links"
            ).pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ"),
            callback_data=ProfileMenuCallback(
                action="editing", field="mentor_status"
            ).pack(),
        ),
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–ö–æ–º–ø–∞–Ω–∏—è"),
            callback_data=ProfileMenuCallback(action="editing", field="company").pack(),
        ),
    )

    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=ProfileMenuCallback(action=None).pack(),
        )
    )

    return builder.as_markup()


def editing_keyboard(next_input: bool = False) -> types.InlineKeyboardMarkup:
    """
    next_input: flag for adding next value
    """
    builder = InlineKeyboardBuilder()
    if next_input:
        pass
        # builder.row(types.InlineKeyboardButton(text=_("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–Ω–∞—á–µ–Ω–∏–µ")))
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=ProfileMenuCallback(action="user_form").pack(),
        )
    )
    return builder.as_markup()


def majors_keyboard(confirms: str = '') -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for key, major in AVALIABLE_PROFESSIONS.items():
        text = f"‚úÖ {major}" if key in confirms else major
        value = f"add_{key}" if key not in confirms else f"rm_{key}"
        builder.row(
            types.InlineKeyboardButton(
                text=text, callback_data=MajorCallback(value=value, confirms=confirms).pack()
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=ProfileMenuCallback(action="user_form").pack(),
        )
    )
    if confirms:
        builder.add(
            types.InlineKeyboardButton(
                text=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                callback_data=MajorCallback(value="save", confirms=confirms).pack(),
            )
        )
    return builder.as_markup()

def mentor_status_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚úÖ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å"),
            callback_data=MentorStatusCallback(ready=True).pack(),
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚ùå –ù–µ –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å"),
            callback_data=MentorStatusCallback(ready=False).pack(),
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=ProfileMenuCallback(action="user_form").pack(),
        )
    )
    return builder.as_markup()


def admin_menu_keyboard(is_admin: bool) -> types.InlineKeyboardMarkup:
    """
    2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π:
    1. –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É
    2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    3. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    4. –ü—Ä–∏—Å–≤–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –ø—Ä–∏—Å–≤–æ–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã Intern, Junior, Middle, Senior. –û–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç —Å—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    """
    builder = InlineKeyboardBuilder()
    if is_admin:
        builder.row(
            types.InlineKeyboardButton(
                text=_("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                callback_data=ProfileAdminMenuCallback(action="export").pack(),
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text=_("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"),
            callback_data=ProfileAdminMenuCallback(action="add_admin").pack(),
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=MainMenuCallback(next_menu_prefix="profile").pack(),
        )
    )
    return builder.as_markup()

def select_admin_rights_keyboard(admin_options: dict, confirms: str = '') -> types.InlineKeyboardMarkup:
    """
    generate keyboard for selecting admin rights
    """

    builder = InlineKeyboardBuilder()
    for key, right in admin_options.items():
        key = str(key)
        text = f"‚úÖ {right}" if key in confirms else right
        value = f"add_{key}" if key not in confirms else f"rm_{key}"
        builder.row(
            types.InlineKeyboardButton(
                text=text, callback_data=AddAdminCallback(value=value, confirms=confirms).pack()
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            callback_data=ProfileMenuCallback(action="admin_menu").pack(),
        )
    )
    if confirms:
        builder.add(
            types.InlineKeyboardButton(
                text=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                callback_data=AddAdminCallback(value="save", confirms=confirms).pack(),
            )
        )
    return builder.as_markup()
